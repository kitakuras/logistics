package com.zz.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.zz.mapper.BasicDataMapper;
import com.zz.pojo.BasicData;
import com.zz.pojo.BasicDataExample;
import com.zz.service.IBasicDataService;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

@Service
public class BasicDataServiceImpl implements IBasicDataService {

	@Autowired
	private BasicDataMapper bdMapper;
	@Autowired
	private JedisPool jedisPool;
	private static final String KEY_PREFIX = "basic:";

	@Override
	public List<BasicData> query(BasicData bd) {
		// TODO Auto-generated method stub
		Jedis jedis = jedisPool.getResource();
		System.out.println(jedis);
		Set<String> keys = jedis.keys("basic:*");
		List<BasicData> list = new ArrayList<>();
		if (keys == null || keys.size() == 0) {
			BasicDataExample example = new BasicDataExample();
			list = bdMapper.selectByExample(example);
			for (BasicData data : list) {
				jedis.hset("basic:"+data.getBaseId(), "BaseId", data.getBaseId().toString());
				String p = data.getParentId()!=null?(data.getParentId().toString()):"-1";
				jedis.hset("basic:"+data.getBaseId(), "ParentId", p);
				jedis.hset("basic:"+data.getBaseId(), "BaseName", data.getBaseName().toString());
				jedis.hset("basic:"+data.getBaseId(), "BaseDesc", data.getBaseDesc().toString());
			}
		} else {
			for (String key : keys) {
				BasicData b = new BasicData();
				b.setBaseId(Integer.parseInt(jedis.hget(key, "BaseId")));
				Integer pid = (Integer.parseInt(jedis.hget(key, "ParentId")));
				b.setParentId((pid != -1)?pid:null);
				b.setBaseName(jedis.hget(key, "BaseName"));
				b.setBaseName(jedis.hget(key, "BaseDesc"));
				list.add(b);
			}
		}
		jedis.close();
		return list;
	}

	@Override
	public Integer addBasicData(BasicData bd) {
		// TODO Auto-generated method stub
		this.clearCache(KEY_PREFIX);
		return bdMapper.insertSelective(bd);
	}
	
	public void clearCache(String keyPrefix){
		Jedis jedis = jedisPool.getResource();
		Set<String> keys = jedis.keys(keyPrefix+"*");
		for (String key : keys) {
			jedis.del(key);
		}
		jedis.close();
	} 

	@Override
	public Integer updateBasicData(BasicData bd) {
		this.clearCache(KEY_PREFIX);
		return bdMapper.updateByPrimaryKeySelective(bd);
	}

	@Override
	public Integer deleteBasicData(Integer id) {
		this.clearCache(KEY_PREFIX);
		return bdMapper.deleteByPrimaryKey(id);
	}

	@Override
	public BasicData queryById(Integer id) {
		Jedis jedis = jedisPool.getResource();
		String key =KEY_PREFIX+id;
		System.out.println("key:"+key);
		BasicData data = new BasicData();
		System.out.println("flag:"+jedis.exists(key));
		if (jedis.exists(key)) {
			data.setBaseId(new Integer(jedis.hget(key, "BaseId")));
			data.setParentId(new Integer(jedis.hget(key, "ParentId")));
			data.setBaseName(jedis.hget(key, "BaseName"));
			data.setBaseDesc(jedis.hget(key, "BaseDesc"));
			System.out.println("Service:"+data);
		} else {
			 data = bdMapper.selectByPrimaryKey(id);
		}
		jedis.close();
		return data;
	}

	@Override
	public List<BasicData> queryParentData() {
		BasicDataExample example = new BasicDataExample();
		example.createCriteria().andParentIdIsNull();
		return bdMapper.selectByExample(example);
	}

	@Override
	public List<BasicData> queryBase(String typeName) {
		return bdMapper.queryByParentBaseName(typeName);
	}

}
