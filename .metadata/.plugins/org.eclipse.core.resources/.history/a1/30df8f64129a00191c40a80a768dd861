package com.zz.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;

import com.zz.common.Constant;
import com.zz.dto.CustomerDto;
import com.zz.dto.OrderDto;
import com.zz.mapper.OrderDetailMapper;
import com.zz.mapper.OrderMapper;
import com.zz.pojo.BasicData;
import com.zz.pojo.Customer;
import com.zz.pojo.Order;
import com.zz.pojo.OrderDetail;
import com.zz.pojo.OrderExample;
import com.zz.pojo.User;
import com.zz.service.IBasicDataService;
import com.zz.service.ICustomerService;
import com.zz.service.IOrderService;
import com.zz.service.IUserService;
@Service
public class OrderServiceImpl implements IOrderService {

	@Autowired
	private IUserService userService;
	@Autowired
	private ICustomerService customerService;
	@Autowired
	private IBasicDataService basicDataService;
	@Autowired
	private OrderMapper orderMapper;
	@Autowired
	private OrderDetailMapper orderDetailMapper;
	
	@Override
	public void getAddOrUpdateInfo(Model m, Integer orderId) {
		// TODO Auto-generated method stub
		if (orderId == null) {
			List<User> users = userService.queryRole(Constant.ROLE_YWY);
			List<CustomerDto> customerDtos = customerService.query(null);
			List<BasicData> intervals = basicDataService.queryBase(Constant.BASE_COMMON_INTERVAL);
			List<BasicData> units = basicDataService.queryBase(Constant.BASIC_UNIT);
			List<BasicData> payments = basicDataService.queryBase(Constant.BASIC_PAYMENT_TYPE);
			List<BasicData> freights = basicDataService.queryBase(Constant.BASIC_FREIGHT_TYPE);
			List<BasicData> fetchs = basicDataService.queryBase(Constant.BASIC_FETCH_TYPE);
			
			List<Customer> customers = new ArrayList<>();
			for (CustomerDto customerDto : customerDtos) {
				customers.add(customerDto.getCustomer());
			}
			
			m.addAttribute("users", users);
	        m.addAttribute("intervals", intervals);
	        m.addAttribute("payments", payments);
	        m.addAttribute("freights", freights);
	        m.addAttribute("fetchs", fetchs);
	        m.addAttribute("customers", customers);
//	      m.addAttribute("countrys", countrys);
	        m.addAttribute("units", units);

		} else {
			OrderExample example = new OrderExample();
			example.createCriteria().andOrderIdEqualTo(orderId);
			List<Order> orders = orderMapper.selectByExample(example );
			if (orders !=null && orders.size()==1) {
				Order order = orders.get(0);
				//客户信息
				User user = userService.queryById(order.getUserId());
				//到达国家
				CustomerDto customerDto = customerService.queryById(order.getDestAreaId());
				//付款方式
				BasicData paymentMethod = basicDataService.queryById(order.getPaymentMethodId());
				//货运方式
				BasicData transMethod = basicDataService.queryById(order.getTransMethodId());
				//取件方式
				BasicData takeMethod = basicDataService.queryById(order.getTakeMethodId());
			}
			
		}
		
		

	}
	@Override
	public boolean saveOrder(OrderDto dto) {
		// TODO Auto-generated method stub
		try {
			dto.setOrderStatus(new Byte("0"));
			orderMapper.insertSelective(dto);
			List<OrderDetail> orderDesc = dto.getOrderDetails();
			for (OrderDetail o : orderDesc) {
				o.setOrderId(dto.getOrderId());
				orderDetailMapper.insertSelective(o);
			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		
	}
	@Override
	public List<Order> query() {
		OrderExample example = new OrderExample();
		orderMapper.selectByExample(example);
		return orderMapper.selectByExample(example);
	}
	@Override
	public void queryInfo(Model m) {
		// TODO Auto-generated method stub
		m.addAttribute("list", this.query());
		m.addAttribute("basicdata", basicDataService.queryAll());
	}

}
